#!/bin/bash
shopt -s nullglob
set -eu

# Genesis Kit `blueprint' Hook
#
# This script outputs the list of merge files needed to support the desired
# feature set selected by the environment parameter file.  As generated, it
# lists all *.yml files in the base, then all *.yml files in each detected
# feature directory, in the order the features are specified in the environment
# yml file.  If finer control is desired, add logic around the wants_kit_feature()
# function (takes a feature as a string, returns exit code 0 if present, non-
# zero exit code otherwise).

declare -a manifests
manifests+=( manifests/prometheus.yml
             manifests/releases/postgres.yml
             manifests/releases/prometheus.yml )

opsdir="ops"
[[ -n "${PREVIOUS_ENV:-}" ]] && opsdir=".genesis/cached/${PREVIOUS_ENV}/$opsdir"

for want in ${GENESIS_REQUESTED_FEATURES}; do
  case "$want" in
    monitor-cf)
      cf_exodus_path="$(lookup params.cf_exodus_path "$GENESIS_ENVIRONMENT/cf")"
      cf_version='1.0.0'
      if safe exists --quiet "${GENESIS_EXODUS_MOUNT}${cf_exodus_path}:kit_version" ; then
        cf_version="$(safe get --quiet "${GENESIS_EXODUS_MOUNT}${cf_exodus_path}:kit_version")"
      fi
      if [[ "$cf_version" =~ ^2. ]] ; then
        manifests+=( manifests/monitor-cf-v2.yml )
        want_feature legacy-firehose && bail "legacy-firehose is not available for cf v2.x deployments"
      else
        manifests+=( manifests/monitor-cf.yml )
        want_feature legacy-firehose && manifests+=( manifests/legacy-firehose.yml )
      fi
      ;;

    monitor-*)
      manifests+=( "manifests/${want}.yml" )
      ;;

    legacy-firehose)
      want_feature monitor-cf || bail "legacy-firehose feature only applicable if monitor-cf feature is active"
      ;;

    self-signed-cert)
      ;;

    *)
      if [[ -f "$GENESIS_ROOT/${opsdir}/$want.yml" || -f "$GENESIS_ROOT/ops/$want.yml" ]] ; then
        manifests+=( "$want" )
      else
        abort=1
        describe >&2 \
          "#R{[ERROR]} The #c{$want} feature is invalid. See the manual for list of valid features."
      fi
      ;;
    esac
done

echo "${manifests[@]}"
